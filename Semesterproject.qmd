---
title: "project-work"
format: html
---

# Vorbereitung

## Libraries laden

```{r}
library(readr)
library(tidyr) 
library(ggplot2)
library(dplyr)
library(sf)

```

## Daten einlesen

```{r}
# Daten von Stefan (ab 29.04.2023)
stefan <- read_delim("posmo_stefan_230516.csv", delim = ",")
stefan$person <- "Stefan"

# Daten von Miriam (ab xx.05.2023)
miriam <- read_delim("posmo_stefan_230516.csv", delim = ",")
miriam$person <- "Miriam"

# Daten zusammenführen
posmo <- rbind(stefan, miriam)

# nicht relevante Spalten entfernen
posmo <- posmo |> 
  select(-user_id, -weekday, -place_name, -transport_mode)

# NA finden & entfernen
posmo[!complete.cases(posmo), ] # Zeigt Zeilen mit NA an
posmo <- drop_na(posmo)# Spalten mit NA entfernen

# Geometrie hinzufügen
posmo <- posmo |> 
  st_as_sf(coords = c("lon_x", "lat_y"), crs = 4326, remove = FALSE) |>  # Geometrie hinzufügen
  st_transform(2056) # transformieren CH1903+ LV95: 2056

# Schweizer Koordinaten zu sf-Tabelle hinzufügen
posmo_coordinates <- st_coordinates(posmo)
posmo <- cbind(posmo, posmo_coordinates)

# WGS Koordinaten entfernen 
posmo <- posmo |> 
  select(-lon_x, -lat_y)

# Daten anschauen
ggplot(posmo, aes(X, Y, color = person))+
  geom_point()+
  geom_path()+
  coord_equal()+
  theme_void()
```

# Geschwindigkeit

```{r}
# Geschwindigkeit herausfinden
posmo <- posmo |> # Zeit
  mutate(
    time = as.numeric(difftime(lead(datetime), datetime, units = "secs")) # secs
  ) # Hier gibt es manchmal 0er, also Datenpunkte zur selben Zeit. Die müssten auch selbe Koordinaten haben und sind für Geschwindigkeitsrechnung nicht zu gebrauchen. Also weg damit... 
# Hier muss "lead" anstatt "lag" benutzt werden

posmo <- posmo |> # time = 0 entfernen
  mutate(time = ifelse(time == 0, NA, time)) |> 
  drop_na()

posmo <- posmo |>
  mutate(
    steplength = round(sqrt((lead(X,1)-X)^2+(lead(Y,1)-Y)^2),1), # meter
    velocity = round((steplength/1000)/(time/60/60),1) # km/h
  )
```

# Moving Window

Brauchen wir das Moving Window überhaupt??? anfänglich gedacht um Daten zu "glätten" eventuell nützlich, um ausreisser zu finden?

```{r}
# Geschwindigkeitsunterschied zu 2 Punkte vor und 2 Punkte nach Betrachtung
movwin <- posmo |> 
  mutate(
    n_plus1 = sqrt((lead(velocity,1)-velocity)^2),
    n_plus2 = sqrt((lead(velocity,2)-velocity)^2),
    n_minus1 = sqrt((lag(velocity,1)-velocity)^2),
    n_minus2 = sqrt((lag(velocity,2)-velocity)^2),
    )

# velocityMean der 4 Distanzen erstellen
movwin <- movwin |> 
  rowwise() |> 
  mutate(velocityMean = mean(c(n_minus1, n_minus2, n_plus1, n_plus2), na.rm = TRUE)) |> 
  ungroup()
```

# Einteilung stay/slow/fast

```{r}
# Erfahrungswerte:

# Stefans Weg zum Bahnhof mit dem Fahrrad, maximale Geschwindigkeit:
# 29.04.2023 09:09:40: 43.0 km/h
# 08.05.2023 14:35:29: 36.0 km/h

# Miriam wie schnell ist dein Bus??? Vielleicht müssen wir meine Velowege wegnehmen, da ich so schnell bin ;-) Bäh, dann wäre aber mein Velo fast und würde alles verfälschen, da ich nie auf mein Velo warte...

# Schwellenwert setzen slow/fast, velocity: slow < 45 km/h <= fast
# Schwellenwert setzen stay, time: stay >= 1800 (30 min) # Schwellenwert evtl. nach oben setzen, da Stefan mal 40 min auf Zug wartete - Wenn jemand länger als Schwellenwert wartet, wird dies nicht als Reisestart gefunden.

posmo <- posmo |> 
  mutate(velocity_text = ifelse(velocity < 45, "slow", "fast"))
posmo$velocity_text[posmo$time >= 1800] <- "stay"

# Ausreisser entfernen
# Mir ist nur derjenige vom 2023-04-29 09:43:01 aufgefallen...

# Wie kann ich dieses Problem alternativ angegangen werden???

# Vorgehen 1: Alle Punkte welche plötzlich einen Geschwindigkeitsunterschied von 30 km/h als benachbarte Punkte aufweisen, werden gelöscht
# posmo$ausreisser[
  # sqrt((posmo$velocity-lag(posmo$velocity))^2) > 30 & 
  # sqrt((posmo$velocity-lag(posmo$velocity))^2) > 30
  # ] <- "NA"
# Fazit: nun gibt es bei jeder Beschleunigung einen Ausreisser, also nicht geeignet

# Vorgehen 2: Alle Punkte, welche in velocity_text von den direkten Nachbarn abweichen werden als Ausreisser markiert, stay ist davon ausgenommen
# posmo$ausreisser[
  # posmo$velocity_text != lag(posmo$velocity_text) & 
  # posmo$velocity_text != lag(posmo$velocity_text) &
  # posmo$velocity_text != "stay"
  # ] <- "NA" 
# Fazit: hier werden kurze Bahn/Busstrecken weggelöschen, bei welcher die Geschwindigkeit immer um den Schwellenwert slow/fast liegt. Für die Auswertung ist dies etwa gleich Schlimm wie Vorgehen 1 (oder???)

# Fazit Vorgehen 1&2: durch die Vorgehen gehen mehr korrekte Daten verloren als Ausreisser. Insgesamt habe ich sowieso nur einen Ausreisser gefunden. Vielleicht visuell machen?

# Vorgehen 3: weiter unten werden durch Suche von Abfolge stay-slow-slow-fast-fast Aussreiser entfernt. Bzw. sie blockieren einige Startpunkte. Annahme: wir haben eine genügend grosse Stichprobengrösse, dass das wegfallen von Reisestartpunkten keine Rolle spielt.

# evtl. Segmente einteilen, segment_id, ist dies hier nötig???

```

# Evente finden

```{r}
# Event finden (stay-slow-fast), event_id

# Start und Enpunkte von Segment mit TRUE markieren
event <- posmo |> 
  mutate(find = ifelse(
      velocity_text != lead(velocity_text) |
      velocity_text != lag(velocity_text)
      , TRUE, NA))

# Nur Start und Enpunkte von Segment behalten
event <- drop_na(event)
event <- event |> 
  select(-find) # unnötige Spalten entfernen

# Abfolge stay-slow-slow-fast-fast finden, so werden auch Ausreisser eliminiert
event <- event |> # Start der Abfolge finden, TRUE
  mutate(find = ifelse(
      velocity_text == "stay" &
      lead(velocity_text, 1) == "slow" &
      lead(velocity_text, 2) == "slow" &
      lead(velocity_text, 3) == "fast" &
      lead(velocity_text, 4) == "fast"
      , TRUE, NA))

# nur Start Wartezeit und Ende Wartezeit behalten

event <- event |> # nur Ende slow (= Start Wartezeit) und Start fast (= Ende Wartezeit) markieren
  mutate(find = ifelse(
      lag(find, 2) == TRUE |
      lag(find, 3) == TRUE
      , TRUE, NA))

event <- drop_na(event) # nur Start & Ende Wartezeit behalten behalten
event <- event |> 
  select(-find) # unnötige Spalten entfernen

# Standort des Events bestimmen
event <- event |>
  mutate(haltestelle_x = ifelse(
      velocity_text == "slow"
      , X, lag(X)))

event <- event |>
  mutate(haltestelle_y = ifelse(
      velocity_text == "slow"
      , Y, lag(Y)))

event <- st_drop_geometry(event) # Alte Geometrie entfernen

event <- event |> 
  select(-X, -Y, -time, -steplength, -velocity) # unnötige Spalten entfernen

# pro event eine Spalte (wide format pro event)
# FEHLER: wide <- pivot_wider(event, names_from = "velocity_text", values_from = "datetime") # Hier funktioniert etwas mit dem Datenformat nicht??? Vielleicht mit Join???


slow <- event |> 
  subset(velocity_text == "slow") # Tabelle slow

fast <- event |> 
  subset(velocity_text == "fast") # Tabelle fast


# FEHLER: join <- left_join(slow, fast, "haltestelle_y", suffix = c("_slow", "_fast")) #Hier funktioniert etwas noch nicht??? Vielleicht ID geben

slow$id <- as.character(1:nrow(slow)) # id
fast$id <- as.character(1:nrow(slow)) # id

event <- left_join(slow, fast, "id", suffix = c("_slow", "_fast"))

event <- event |> # checken, ob standorte gleich sind (ob id richtig verteilt wurden)
  mutate(check = ifelse(
      haltestelle_x_slow == haltestelle_x_fast &
      haltestelle_y_slow == haltestelle_y_fast
      , TRUE, NA))
event[!complete.cases(event), ] # alle id richtig

names(event)
event <- event |> 
  select(-velocity_text_slow, -person_fast, -velocity_text_fast, -haltestelle_x_fast,
         -haltestelle_y_fast, -check) |> # unnötige Spalten entfernen
  rename(person = person_slow, X = haltestelle_x_slow, Y = haltestelle_y_slow, 
         start_warten = datetime_slow, ende_warten = datetime_fast) # Spalten umbennenen

```

# Evente validieren

```{r}
# Bahnhöfe einlesen

# Buffer um Bahnhof

# Intersect Buffer mit Event
```

# Wartezeit berechnen

```{r}
# wartezeit pro Event: difftime(max(Segmentslow), min(segmentfast)
event <- event |> 
  mutate(wartezeit = as.numeric(difftime(ende_warten, start_warten, units = "mins"))) # ich glaube, die Daten sind nicht so gut...
# Wir müssen slow slower machen ;-)... bäh... aber wie ohne, dass das Velo nichts verfälscht?!

```

